import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { setupMaster } from 'cluster';
import { RootState, AppThunk } from '../../app/store';

export interface User{
    userId?: number | null,
	id?: number | null,
	title: string,
}

export interface JsonPlaceHolderState {
    user?: User | null;
    status: 'idle' | 'loading' | 'failed';
    error: null;
    errorMessage: null;
}

const initialState: JsonPlaceHolderState = {
    user: null,
	status: 'loading',
    error: null,
    errorMessage: null,
};



export const jsonPlaceholderSlice = createSlice({
  name: 'jsonplaceholder',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
        getUser(state, action: PayloadAction<number>){
        },
        setLoading(){
            return {...initialState, status:'loading' };
        },
        setUser(state, action){
            const userData = action.payload;
            return {...state, user:userData, status:'idle' };
        }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    
  },
});

export const { getUser, setUser, setLoading } = jsonPlaceholderSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectJsonPlaceholder = (state: RootState) => state.jsonplaceholder.user;
export const selectStatus = (state: RootState) => state.jsonplaceholder.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default jsonPlaceholderSlice.reducer;
